{
	"数値複数受け取り": {
		"prefix": "map(int,stdin.readline().split())",
		"body": "map(int,stdin.readline().split())"
	},
	"func作成": {
		"prefix": "def func",
		"body": ["from sys import stdin",
				"def func():",
				"",
				"    print()",
				"    return",
				"func()"
				]
	},	
	"8方向探査": {
		"prefix": "hatihoukou",
		"body": "dy = [1, 0, -1, 0, 1, -1, 1, -1]\ndx = [0, 1, 0, -1, 1, 1, -1, -1]"
	},
	"stdin": {
		"prefix": "stdin",
		"body": "from sys import stdin"
	},

	"二次元配列受け取り": {
		"prefix": "[list(map(int,stdin.readline().split())) for _ in range(N)]",
		"body": "[list(map(int,stdin.readline().split())) for _ in range(N)]",
	},
	
	"gcd関数": {
		"prefix": "gcd",
		"body": [
			"def gcd_l(list_g2):",
			"   for i in reversed(range(1, min(list_g2)+1)):",
			"      if any([j % i for j in list_g2]) == False:",
			"         return i",
			"print(gcd_l([]))",
				]
	},

	"転置": {
		"prefix": "tenti",
		"body": "l_2d_t = [list(x) for x in zip(*l_2d)]",
	},
	"判定": {
		"prefix": "judge",
		"body": "print('Yes' if func() else 'No')",
	},
	"itertools": {
		"prefix": "itertools",
		"body": "import itertools",
	},
	

	
	// "sample1": {
	// 	"prefix": "yoda",
	// 	"body": "やるか、やらぬかだ。やってみる、などない。"
	// }

	
	// Place your Atcoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}
